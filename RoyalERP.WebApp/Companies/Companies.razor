@page "/companies"
@using RoyalERP.WebApp.Shared.API.Companies
@inject ICompanyAPI companyAPI;

<PageTitle>Companies</PageTitle>

<div class="container">

    <div class="row justify-content-end">
        <div class="col-1">
            <h2>Companies</h2>
        </div>

        <div class="col">
            <div class="float-end">
                <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">Export</RadzenButton>
                <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">Upload</RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Primary">+ Create Company</RadzenButton>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <RadzenDataGrid TItem="Company" Data="@_companies" AllowFiltering="false" AllowColumnResize="true" AllowSorting="true">
                <Columns>
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Name" Title="Number" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Contact" Title="Contact" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Email" Title="Email" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Address.Line1" Title="Line 1" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Address.Line2" Title="Line 2" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Address.Line3" Title="Line 3" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Address.City" Title="City" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Address.State" Title="State" />
                    <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Address.Zip" Title="Zip" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMsg)) {
    <p style="color:red">@errorMsg</p>
    @if (!showDetailedError) {
        <button @onclick="ShowExceptionDetails">Details</button>
    } else {
        <p>@(exception?.ToString() ?? "no details.")</p>
    }
}

@code {

    bool isLoading = true;
    string errorMsg = "";
    Exception? exception = default;
    bool showDetailedError = false;

    private List<Company> _companies = new();

    protected override async Task OnInitializedAsync() {
        
        await LoadCompanies();

    }

    private async Task LoadCompanies() {
        try {

            isLoading = true;
            IEnumerable<Company> companies = await companyAPI.GetAll();
            _companies = new(companies);
            errorMsg = "";

        } catch (Exception ex) {
            errorMsg = ex.Message;
            exception = ex;
        } finally {
            isLoading = false;
        }
    }

    private void ShowExceptionDetails() => showDetailedError = true;

}
