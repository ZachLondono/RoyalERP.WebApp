@page "/companies"
@using RoyalERP.WebApp.Shared.API.Companies
@using RoyalERP.WebApp.Shared.API.Products
@using RoyalERP.WebApp.Shared.API.ProductAttributes
@inject ICompanyAPI companyAPI;
@inject IProductAPI productApi;
@inject IProductAttributeAPI attributeApi;
@inject DialogService dialogService

<PageTitle>Companies</PageTitle>

<style>
    form .row {
        margin-bottom: 16px;
    }

    .new-product-defaults {
        padding: 10px;
        background-color: #F9F9F9;
        border: 1px solid #E0E1E4;
        border-radius: 4px;
    }
</style>

@if (isLoading) {
    <span>Loading...</span>
} else {
    <div class="container">

        <div class="row justify-content-end">
            <div class="col-1">
                <h2>Companies</h2>
            </div>

            <div class="col">
                <div class="float-end">
                    <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">
                        <i class="bi bi-download"></i><span class="ml-2">Download</span>
                    </RadzenButton>
                    <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">
                        <i class="bi bi-upload"></i><span class="ml-2">Upload</span>
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Click=@(async () => await CreateNewCompany())>
                        <i class="bi bi-plus-circle"></i><span class="ml-2">Create Company</span>
                    </RadzenButton>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                <RadzenDataGrid @ref="companyGrid" TItem="Company" Data="@_companies" RowSelect="OnCompanySelect" AllowFiltering="false" AllowColumnResize="true" AllowSorting="true" SelectionMode="DataGridSelectionMode.Single">
                    <Columns>
                        <RadzenDataGridColumn TItem="Company" Sortable="true" Property="Name" Title="Name" />
                    </Columns>
                </RadzenDataGrid>
            </div>
            <div class="col">
                <RadzenCard>

                    @if (_selectedCompany != null) {
                        <RadzenTemplateForm Data="@_selectedCompany" TItem="Company">

                            <div class="row">
                                <div class="col">
                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Name" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Name" @bind-Value=_selectedCompany.Name Change="() => isCompanyDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Contact" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Contact" @bind-Value=_selectedCompany.Contact Change="() => isCompanyDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Email" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Email" @bind-Value=_selectedCompany.Email Change="() => isCompanyDirty = true" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-3">
                                    <div class="row justify-content-center">
                                        <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Style="width: 100px;" Disabled="(!IsDirty)" Click="SaveChanges" BusyText="Saving" IsBusy="isSaving" />
                                    </div>
                                </div>
                            </div>

                            <RadzenFieldset AllowCollapse="true" Class="mb-3" Style="background-color:#F9F9F9;">

                                <HeaderTemplate>
                                    <span class="d-inline-flex align-items-center align-middle">
                                        <RadzenIcon Icon="markunread_mailbox" Class="mr-1" /><b>Address</b>
                                    </span>
                                </HeaderTemplate>

                                <ChildContent>
                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Line 1" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Line1" @bind-Value=_selectedCompany.Address.Line1 Change="() => isAddressDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Line 2" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Line2" @bind-Value=_selectedCompany.Address.Line2 Change="() => isAddressDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Line 3" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Line3" @bind-Value=_selectedCompany.Address.Line3 Change="() => isAddressDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="City" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="City" @bind-Value=_selectedCompany.Address.City Change="() => isAddressDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="State" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="State" @bind-Value=_selectedCompany.Address.State Change="() => isAddressDirty = true" />
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-2 align-items-center d-flex">
                                            <RadzenLabel Text="Zip" />
                                        </div>
                                        <div class="col">
                                            <RadzenTextBox style="width: 100%;" Name="Zip" @bind-Value=_selectedCompany.Address.Zip Change="() => isAddressDirty = true" />
                                        </div>
                                    </div>
                                </ChildContent>

                            </RadzenFieldset>

                            <hr />
                            <h3>Default Product Attributes</h3>

                            @foreach (var product in _defaultsByProduct.Keys) {

                                <RadzenFieldset AllowCollapse="true" Class="mb-3" Style="background-color:#F9F9F9;">

                                    <HeaderTemplate>
                                        <span class="d-inline-flex align-items-center align-middle">
                                            <b>@product.Name</b>
                                        </span>
                                    </HeaderTemplate>

                                    <ChildContent>

                                        <div class="row">

                                            @foreach (var defaultConfig in _defaultsByProduct[product].Where(d => !d.IsDeleted)) {
                                                <div class="row">
                                                    <div class="col-2 align-items-center d-flex">
                                                        <RadzenLabel Text="@defaultConfig.AttributeName" />
                                                    </div>
                                                    <div class="col">
                                                        <RadzenTextBox Style="width:100%" @bind-Value="defaultConfig.DefaultValue" Change="() => areDefaultsDirty = true" />
                                                    </div>
                                                    <div class="col-1">
                                                        <button class="rz-button-sm btn btn-outline-danger" onclick="@(() => RemoveDefault(product, defaultConfig))">
                                                            <i class="bi bi-x-lg"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            }

                                        </div>

                                        <div class="row mt-4 justify-content-center">

                                            <div class="col-4 d-flex">
                                                <!-- Select all attributes from the attributesByProducts where the attribute id is not in the defaultsByProducts  -->
                                                <RadzenDropDown Style="width:100%"
                                                                AllowClear="true"
                                                                TValue="ProductAttribute"
                                                                TextProperty="Name"
                                                                Placeholder="Select Attribute"
                                                                Data="@( _attributesByProducts[product].Where(a => !_defaultsByProduct[product].Any(d => !d.IsDeleted && d.AttributeId.Equals(a.Id)) ) )"
                                                                Change="@( value => AttributeDropDownChange(product, value) )" />
                                            </div>
                                            <div class="col-2 d-flex">
                                                <RadzenButton Text="Add"
                                                            ButtonStyle="ButtonStyle.Secondary"
                                                            Click="() => AddDefault(product, _selectedAttributeByProduct[product], string.Empty)"
                                                            Disabled="!_selectedAttributeByProduct.ContainsKey(product)"/>
                                            </div>

                                        </div>

                                    </ChildContent>

                                </RadzenFieldset>

                            }

                            <div class="row justify-content-center new-product-defaults" style="margin-left: 0px; margin-right: 0px;">
                                <div class="col-4 d-flex">
                                    <RadzenDropDown Style="width:100%"
                                                    AllowClear="true"
                                                    TValue="Product"
                                                    TextProperty="Name"
                                                    Placeholder="Select Product"
                                                    Data="@(_attributesByProducts.Keys.Where(p => !_defaultsByProduct.ContainsKey(p)))"
                                                    @bind-Value="productsDropdownValue" />
                                </div>
                                <div class="col-2 d-flex">
                                    <RadzenButton Text="Add"
                                                ButtonStyle="ButtonStyle.Secondary"
                                                Click="AddSelectedProduct"
                                                Disabled="productsDropdownValue is null" />
                                </div>
                            </div>

                        </RadzenTemplateForm>

                    }

                </RadzenCard>
            </div>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMsg)) {
    <p style="color:red">@errorMsg</p>
    @if (!showDetailedError) {
        <button @onclick="ShowExceptionDetails">Details</button>
    } else {
        <p>@(exception?.ToString() ?? "no details.")</p>
    }
}

@code {

    bool isLoading = true;
    string errorMsg = "";
    Exception? exception = default;
    bool showDetailedError = false;

    private bool IsDirty => (isCompanyDirty || isAddressDirty || areDefaultsDirty);
    private bool isCompanyDirty = false;
    private bool isAddressDirty = false;
    private bool areDefaultsDirty = false;
    private bool isSaving = false;

    private RadzenDataGrid<Company>? companyGrid;
    private Product? productsDropdownValue;
    private Company? _selectedCompany = null;
    private List<Company> _companies = new();
    private Dictionary<Product, List<DefaultViewModel>> _defaultsByProduct = new();
    private Dictionary<Product, List<ProductAttribute>> _attributesByProducts = new();
    private Dictionary<Product, ProductAttribute> _selectedAttributeByProduct = new();

    protected override async Task OnInitializedAsync() {

        await LoadCompanies();

        if (_companies.Any()) {
            var selected = _companies.First();
            companyGrid?.SelectRow(selected);
        }

    }

    protected override Task OnAfterRenderAsync(bool firstRender) {

        if (!firstRender) return Task.CompletedTask;

        if (_companies.Any()) {
            var selected = _companies.First();
            companyGrid?.SelectRow(selected);
        }

        return Task.CompletedTask;

    }

    private async Task LoadCompanies() {
        try {

            isLoading = true;
            IEnumerable<Company> companies = await companyAPI.GetAll();
            _companies = new(companies);
            errorMsg = "";

        } catch (Exception ex) {
            errorMsg = ex.Message;
            exception = ex;
        } finally {
            isLoading = false;
        }
    }

    private async Task OnCompanySelect(Company company) {

        _selectedCompany = company;
        Clean();

        var products = await productApi.GetAll();

        Dictionary<Guid, string> attributeNames = new();
        Dictionary<Guid, Product> productsById = new();

        _defaultsByProduct.Clear();

        List<DefaultViewModel> defaults = new();
        foreach (var defaultConfig in company.Defaults) {

            var attributeName = "";
            if (!attributeNames.TryGetValue(defaultConfig.AttributeId, out attributeName)) {
                var attribute = await attributeApi.GetById(defaultConfig.AttributeId);

                if (attribute is null) continue;

                attributeName = attribute.Name;
                attributeNames[defaultConfig.AttributeId] = attributeName;
            }

            Product? product = null;
            if (!productsById.TryGetValue(defaultConfig.ProductId, out product)) {
                product = products.Where(p => p.Id.Equals(defaultConfig.ProductId)).FirstOrDefault();

                if (product is null) continue;

                productsById[defaultConfig.ProductId] = product;
            }

            defaults.Add(new(defaultConfig.ProductId, defaultConfig.AttributeId, attributeName, defaultConfig.Value));

        }

        _defaultsByProduct = defaults.GroupBy(d => d.ProductId).ToDictionary(g => productsById[g.Key], g => g.ToList());

        //TODO: this does not need to be done every time a company is selected
        Dictionary<Guid, ProductAttribute> attributeCache = new();
        _attributesByProducts = new();
        foreach (var product in products) {

            var attributes = new List<ProductAttribute>();

            foreach (var attrId in product.Attributes) {

                ProductAttribute? attribute = null;

                if (!attributeCache.TryGetValue(attrId, out attribute)) {
                    attribute = await attributeApi.GetById(attrId);
                }

                if (attribute is null) continue;
                attributes.Add(attribute);

            }

            _attributesByProducts.Add(product, attributes);

        }

    }

    private async Task CreateNewCompany() {

        var result = await dialogService.OpenAsync<NewCompanyDialog>("New Company", null, null);

        if (result is Company company) {

            var companiesList = new List<Company>();
            companiesList.AddRange(_companies);
            companiesList.Add(company);

            _companies = companiesList;

            companyGrid?.SelectRow(company);

        }

    }

    /// <summary>
    /// Removes the default from the company. If the default is new, then it has not yet been persisted so it can just be removed from the collection of defaults shown. Otherwise, mark it as deleted so that it can be removed when the user clicks the save button.
    /// </summary>
    private void RemoveDefault(Product product, DefaultViewModel defaultConfig) {

        if (_selectedCompany is null) return;

        if (defaultConfig.IsNew)
            _defaultsByProduct[product].Remove(defaultConfig);
        else
            defaultConfig.IsDeleted = true;

        StateHasChanged();

    }

    private void AddDefault(Product product, ProductAttribute attribute, string value) {

        if (_selectedCompany is null) return;

        if (!_defaultsByProduct.ContainsKey(product)) {
            _defaultsByProduct.Add(product, new());
        }

        _defaultsByProduct[product].Add(new DefaultViewModel(product.Id, attribute.Id, attribute.Name, value, isNew: true));

        _selectedAttributeByProduct.Remove(product);

        StateHasChanged();

    }

    private void AttributeDropDownChange(Product product, object? value) {

        if (value is null) {

            _selectedAttributeByProduct.Remove(product);

        } else {

            _selectedAttributeByProduct[product] = (ProductAttribute)value;

        }

    }

    private void AddSelectedProduct() {

        if (productsDropdownValue is null) return;

        _defaultsByProduct.Add(productsDropdownValue, new());

        productsDropdownValue = null;

    }

    private async Task SaveChanges() {

        if (_selectedCompany is null) return;

        isSaving = true;

        List<Task> updates = new();

        if (isCompanyDirty) {
            var update = companyAPI.Update(_selectedCompany.Id, new() {
                Name = _selectedCompany.Name,
                Email = _selectedCompany.Email,
                Contact = _selectedCompany.Contact,
            });

            updates.Add(update);
        }

        if (isAddressDirty)
            updates.Add(companyAPI.UpdateAddress(_selectedCompany.Id, _selectedCompany.Address));


        if (areDefaultsDirty) {
            foreach (var product in _defaultsByProduct.Keys) {
                foreach (var defaultVal in _defaultsByProduct[product].Where(d => d.IsDirty)) {

                    Task update;

                    if(defaultVal.IsDeleted) {

                        update = companyAPI.RemoveDefaultValue(_selectedCompany.Id, defaultVal.ProductId, defaultVal.AttributeId);

                    } else {

                        update = companyAPI.SetDefaultValue(_selectedCompany.Id, new() {
                            ProductId = defaultVal.ProductId,
                            AttributeId = defaultVal.AttributeId,
                            Value = defaultVal.DefaultValue
                        });

                    }

                    updates.Add(update);

                    defaultVal.Save();

                }
            }
        }

        await Task.WhenAll(updates);

        isSaving = false;
        Clean();

    }

    private void Clean() {
        isCompanyDirty = false;
        isAddressDirty = false;
        areDefaultsDirty = false;
    }

    private void ShowExceptionDetails() => showDetailedError = true;

    class DefaultViewModel {

        public bool IsDirty { get; private set; }

        public bool IsNew { get; private set; }

        private bool _isDeleted = false;
        public bool IsDeleted {
            get => _isDeleted;
            set {
                IsDirty = true;
                _isDeleted = value;
                IsNew = false;
            }
        }

        public Guid ProductId { get; init; }

        public Guid AttributeId { get; init; }

        public string AttributeName { get; init; }

        private string _defaultValue;
        public string DefaultValue {
            get => _defaultValue;
            set {
                IsDirty = true;
                _defaultValue = value;
            }
        }

        public DefaultViewModel(Guid productId, Guid attributeId, string attributeName, string defaultValue, bool isNew = false) {
            ProductId = productId;
            AttributeId = attributeId;
            AttributeName = attributeName;
            _defaultValue = defaultValue;
            IsNew = isNew;
        }

        public void Save() {
            IsDirty = false;
            IsNew = false;
            _isDeleted = false;
        }

    }

}
