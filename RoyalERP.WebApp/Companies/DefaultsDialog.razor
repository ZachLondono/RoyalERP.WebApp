@page "/defaults"
@using RoyalERP.WebApp.Shared.API.Companies
@using RoyalERP.WebApp.Shared.API.Products
@using RoyalERP.WebApp.Shared.API.ProductAttributes
@inject ICompanyAPI companyApi
@inject IProductAPI productApi
@inject IProductAttributeAPI attributeApi

<style>

    .new-product-defaults {

        padding: 10px;
        background-color: #F9F9F9;
        border: 1px solid #E0E1E4;
        border-radius: 4px;

    }

</style>

@if (_company is null) {

    <span>Loading...</span>

} else {

    <div class="container">

        <div class="row">
            @foreach (var product in _defaultsByProduct.Keys) {

                <RadzenFieldset AllowCollapse="true" Class="mb-3" Style="background-color:#F9F9F9;">

                    <HeaderTemplate>
                        <span class="d-inline-flex align-items-center align-middle">
                            <b>@product.Name</b>
                        </span>
                    </HeaderTemplate>

                    <ChildContent>
                        
                        <div class="row">

                            @foreach(var defaultConfig in _defaultsByProduct[product]) {
                                <div class="row">
                                    <div class="col-2 align-items-center d-flex">
                                        <RadzenLabel Text="@defaultConfig.AttributeName" />
                                    </div>
                                    <div class="col">
                                        <RadzenTextBox Style="width:100%" @bind-Value="defaultConfig.DefaultValue" />
                                    </div>
                                    <div class="col-1">
                                        <RadzenButton Text="X" ButtonStyle="ButtonStyle.Danger" />
                                    </div>
                                </div>
                            }

                        </div>

                        <div class="row mt-4 justify-content-center">

                            <div class="col-4 d-flex">
                                <!-- Select all attributes from the attributesByProducts where the attribute id is not in the defaultsByProducts  -->
                                <RadzenDropDown Style="width:100%" AllowClear="true" TValue="ProductAttribute" TextProperty="Name" Placeholder="Select Attribute" Data="@( _attributesByProducts[product].Where(a => !_defaultsByProduct[product].Any(d => d.AttributeId.Equals(a.Id)) ) )" />
                            </div>
                            <div class="col-2 d-flex">
                                <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Secondary" />
                            </div>

                        </div>

                    </ChildContent>

                </RadzenFieldset>

            }
        </div>

        <div class="row justify-content-center new-product-defaults">

            <div class="col-4 d-flex">
                <RadzenDropDown Style="width:100%" AllowClear="true" TValue="Product" TextProperty="Name" Placeholder="Select Product" Data="@(_attributesByProducts.Keys.Where(p => !_defaultsByProduct.ContainsKey(p)))" />
            </div>
            <div class="col-2 d-flex">
                <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Secondary" />
            </div>

        </div>

        <div class="row mt-3 justify-content-center">
            <div class="col-2">
                <RadzenButton Text="Save"  />
            </div>
        </div>

    </div>

}

@code {

    private Guid CompanyId { get; set; } = Guid.Parse("21552A61-9F88-454F-A343-3406965BA3CF");

    private Company? _company = null;
    private Dictionary<Product, List<DefaultViewModel>> _defaultsByProduct = new();
    private Dictionary<Product, List<ProductAttribute>> _attributesByProducts = new();

    protected override async Task OnInitializedAsync() {

        _company = await companyApi.GetById(CompanyId);
        var products = await productApi.GetAll();

        Dictionary<Guid, string> attributeNames = new();
        Dictionary<Guid, Product> productsById = new();

        _defaultsByProduct.Clear();

        List<DefaultViewModel> defaults = new();
        foreach (var defaultConfig in _company.Defaults) {

            var attributeName = "";
            if (!attributeNames.TryGetValue(defaultConfig.AttributeId, out attributeName)) {
                var attribute = await attributeApi.GetById(defaultConfig.AttributeId);

                if (attribute is null) continue;

                attributeName = attribute.Name;
                attributeNames[defaultConfig.AttributeId] = attributeName;
            }

            Product? product = null;
            if (!productsById.TryGetValue(defaultConfig.ProductId, out product)) {
                product = products.Where(p => p.Id.Equals(defaultConfig.ProductId)).FirstOrDefault();

                if (product is null) continue;

                productsById[defaultConfig.ProductId] = product;
            }

            defaults.Add(new(defaultConfig.ProductId, defaultConfig.AttributeId, attributeName, defaultConfig.Value));

        }

        _defaultsByProduct = defaults.GroupBy(d => d.ProductId).ToDictionary(g => productsById[g.Key], g => g.ToList());


        Dictionary<Guid, ProductAttribute> attributeCache = new();
        _attributesByProducts = new();
        foreach (var product in products) {

            var attributes = new List<ProductAttribute>();

            foreach (var attrId in product.Attributes) {

                ProductAttribute? attribute = null;

                if (!attributeCache.TryGetValue(attrId, out attribute)){
                    attribute = await attributeApi.GetById(attrId);
                }

                if (attribute is null) continue;
                attributes.Add(attribute);

            }

            _attributesByProducts.Add(product, attributes);

        }

    }

    class DefaultViewModel {

        public bool HasChanged { get; private set; }

        public Guid ProductId { get; init; }

        public Guid AttributeId { get; init; }

        public string AttributeName { get; init; }

        private string _defaultValue;
        public string DefaultValue {
            get => _defaultValue;
            set {
                HasChanged = true;
                _defaultValue = value;
            }
        }

        public DefaultViewModel(Guid productId, Guid attributeId, string attributeName, string defaultValue) {
            ProductId = productId;
            AttributeId = attributeId;
            AttributeName = attributeName;
            _defaultValue = defaultValue;
        }

        public void Save() {
            HasChanged = false;
        }

    }

}
