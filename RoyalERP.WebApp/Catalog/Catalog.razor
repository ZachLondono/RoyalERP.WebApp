@page "/catalog"
@using RoyalERP.WebApp.Shared.API.ProductAttributes
@using RoyalERP.WebApp.Shared.API.ProductClasses
@using RoyalERP.WebApp.Shared.API.Products
@inject IProductAPI productApi
@inject IProductClassAPI productclassApi
@inject IProductAttributeAPI attributeApi
@inject DialogService dialogService

<PageTitle>Catalog</PageTitle>

@if(isLoading) {
    <p>Loading...</p>
} else {

    <div class="container">

        <RadzenTabs>
            <Tabs>

                <!-- Products -->

                <RadzenTabsItem Text="Products">
                    <div class="row justify-content-end">
                        <div class="col mb-2">
                            <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Primary">
                                <i class="bi bi-plus-circle"></i><span class="ml-2">Create Product</span>
                            </RadzenButton>
                            <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">
                                <i class="bi bi-download"></i><span class="ml-2">Download</span>
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Light">
                                <i class="bi bi-upload"></i><span class="ml-2">Upload</span>
                            </RadzenButton>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <RadzenDataGrid TItem="Product" Data="@_products" AllowFiltering="false" AllowSorting="true" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedProducts @ref="productsGrid">
                                <Columns>
                                    <RadzenDataGridColumn TItem="Product" Sortable="true" Property="Name" Title="Name" Context="product">
                                    <RadzenDataGridColumn TItem="Product" Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                                        <Template Context="product">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteProductRow(product))" @onclick:stopPropagation="true" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                        <div class="col">
                            <RadzenCard>
                                @if (_selectedProducts.Any()) {
                                    var product = _selectedProducts.First();

                                    <div class="row">
                                        <h3>@product.Name</h3>
                                    </div>

                                    <div class="row">
                                        <ul class="list-group list-group-flush" style="border-top:0px;">
                                            @foreach (var attr in _attributesByProduct[product]) {
                                                <li class="list-group-item">@attr.Name</li>
                                            }
                                        </ul>
                                    </div>

                                    <div class="row mt-2">
                                        <div class="col d-flex">
                                            <RadzenDropDown TValue="string" Data="@(new string[] { "A", "B" })"/>
                                        </div>
                                        <div class="col">
                                            <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Secondary"/>
                                        </div>
                                    </div>

                                } else {
                                    <span>Select product to edit</span>
                                }
                            </RadzenCard>
                        </div>
                    </div>
                </RadzenTabsItem>


                <!-- Product Classes -->

                <RadzenTabsItem Text="Classes">
                    <div class="row justify-content-end">
                        <div class="col mb-2">
                            <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Primary">
                                <i class="bi bi-plus-circle"></i><span class="ml-2">Create Class</span>
                            </RadzenButton>
                            <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">
                                <i class="bi bi-download"></i><span class="ml-2">Download</span>
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Light">
                                <i class="bi bi-upload"></i><span class="ml-2">Upload</span>
                            </RadzenButton>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <RadzenDataGrid TItem="ProductClass" Data="@_productClasses" AllowFiltering="false" AllowSorting="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ProductClass" Sortable="true" Property="Name" Title="Name" Context="prodClass">
                                        <Template>
                                            <span>@prodClass.Name</span>
                                            <button class="rz-button-sm btn btn-outline-danger float-end">
                                                <i class="bi bi-x-lg"></i>
                                            </button>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </div>
                </RadzenTabsItem>

                <!-- Product Attributes -->

                <RadzenTabsItem Text="Attributes">
                    <div class="row justify-content-end">
                        <div class="col mb-2">
                            <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Primary" Click="CreateAttribute">
                                <i class="bi bi-plus-circle"></i><span class="ml-2">Create Attribute</span>
                            </RadzenButton>
                            <RadzenButton class="mr-3" ButtonStyle="ButtonStyle.Light">
                                <i class="bi bi-download"></i><span class="ml-2">Download</span>
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Light">
                                <i class="bi bi-upload"></i><span class="ml-2">Upload</span>
                            </RadzenButton>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <RadzenDataGrid TItem="ProductAttribute" Data="@_productAttributes" AllowFiltering="false" AllowSorting="true" @ref="attributesGrid">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ProductAttribute" Sortable="true" Property="Name" Title="Name" Context="attribute">
                                        <EditTemplate>
                                            <RadzenTextBox @bind-Value="attribute.Name" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ProductAttribute" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="120px">
                                        <Template Context="attribute">
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="(async () => await EditAttributeRow(attribute))" @onclick:stopPropagation="true">
                                            </RadzenButton>
                                        </Template>
                                        <EditTemplate Context="attribute">
                                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="(async () => await SaveAttriubteRow(attribute))" />
                                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="(() => CancelAttributeEdit(attribute))" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ProductAttribute" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px">
                                        <Template Context="attribute">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteAttributeRow(attribute))" @onclick:stopPropagation="true" />
                                        </Template>
                                        <EditTemplate Context="attribute">
                                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Class="m-1" Click="@(args => DeleteAttributeRow(attribute))" />
                                        </EditTemplate>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </div>
                </RadzenTabsItem>

            </Tabs>
        </RadzenTabs>

    </div>

}

@if (!string.IsNullOrEmpty(errorMsg)) {
    <p style="color:red">@errorMsg</p>
    @if (!showDetailedError) {
        <button @onclick="ShowExceptionDetails">Details</button>
    } else {
        <p>@(exception?.ToString() ?? "no details.")</p>
    }
}

@code {

    bool isLoading = true;
    string errorMsg = "";
    Exception? exception = default;
    bool showDetailedError = false;

    private List<Product> _products = new();
    private RadzenDataGrid<Product>? productsGrid;

    private List<ProductAttribute> _productAttributes = new();
    private RadzenDataGrid<ProductAttribute>? attributesGrid;

    private IList<Product> _selectedProducts = new List<Product>();
    private List<ProductClass> _productClasses = new();
    private Dictionary<Product, List<ProductAttribute>> _attributesByProduct = new();

    protected override async Task OnInitializedAsync() {

        await LoadData();

        if (_products.Any())
            _selectedProducts.Add(_products.First());

        foreach (var product in _products) {

            var attributes = new List<ProductAttribute>();

            foreach (var attrId in product.Attributes) {

                var attribute = _productAttributes.Where(a => a.Id.Equals(attrId)).FirstOrDefault();
                if (attribute is null) continue;
                attributes.Add(attribute);

            }

            _attributesByProduct.Add(product, attributes);

        }

    }

    private async Task LoadData() {
        try {

            isLoading = true;
            _products = new(await productApi.GetAll());
            _productClasses = new(await productclassApi.GetAll());
            _productAttributes = new(await attributeApi.GetAll());
            errorMsg = "";

        } catch (Exception ex) {
            errorMsg = ex.Message;
            exception = ex;
        } finally {
            isLoading = false;
        }
    }

    private async Task DeleteProductRow(Product product) {
        if (productsGrid is null) return;
        _products.Remove(product);
        await productApi.Delete(product.Id);
        await productsGrid.Reload();
    }

    private async Task CreateAttribute() {

        if (attributesGrid is null) return;

        var result = await dialogService.OpenAsync<NewAttributeDialog>("New Attribute", null, null);

        if (result is ProductAttribute attribute) {

            await attributesGrid.InsertRow(attribute);

        }

    }

    private async Task EditAttributeRow(ProductAttribute attribute) {
        if (attributesGrid is null) return;
        await attributesGrid.EditRow(attribute);
    }

    private void CancelAttributeEdit(ProductAttribute attribute) {
        if (attributesGrid is null) return;
        attributesGrid.CancelEditRow(attribute);
    }

    private async Task SaveAttriubteRow(ProductAttribute attribute) {
        if (attributesGrid is null) return;
        await attributeApi.Update(attribute.Id, new() { Name = attribute.Name });
        await attributesGrid.UpdateRow(attribute);
    }

    private async Task DeleteAttributeRow(ProductAttribute attribute) {
        if (attributesGrid is null) return;
        _productAttributes.Remove(attribute);
        await attributeApi.Delete(attribute.Id);
        await attributesGrid.Reload();
    }

    private void ShowExceptionDetails() => showDetailedError = true;

}
