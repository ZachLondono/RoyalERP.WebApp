@page "/manufacturing"
@using Humanizer
@using RoyalERP.WebApp.Shared.API.WorkOrders
@using System.Linq;
@using System.Diagnostics
@inject IWorkOrderAPI workorderApi

<PageTitle>Manufacturing</PageTitle>

<style>

    .link {
        cursor: pointer;
    }

    .link:hover {
        color: darkblue;
        text-decoration: underline;
    }

</style>

@if(isLoading) {
    <p>Loading...</p>
} else {

    if (_workOrdersByProduct.Count == 0) {
        <p>No orders to show</p>
    } else {
        
        <div class="container">

            <div class="row">

                <div class="col-md-auto">
                    <h4 class="mt-4">Work Orders</h4>
                    <RadzenTree Change=@OnProductSelect>
                        @{
                            bool isFirst = true;
                            foreach (string product in _workOrdersByProduct.Keys) {
                                    <RadzenTreeItem Text="@product" Selected="isFirst"></RadzenTreeItem>
                                isFirst = false;
                            }
                        }
                    </RadzenTree>
                </div>

                <div class="col">

                    @if (string.IsNullOrEmpty(_selectedProductname)) {

                        <b>Select product to view work orders</b>

                    } else {

                        <div class="container">
                            <div class="row justify-content-end">
                                <div class="col-4">
                                    <h2 class="mb-0 mt-2">@_selectedProductname.Pluralize(inputIsKnownToBeSingular: false)</h2>
                                </div>

                                <div class="col">
                                    <div class="float-end">
                                        <RadzenButton ButtonStyle="ButtonStyle.Light">Export</RadzenButton>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col">
                                    <RadzenTabs>
                                        <Tabs>
                                    <RadzenTabsItem Text="Scheduler">

                                                <!-- Late Orders -->
                                                @if (_selectedProductWorkOrders.Where(o => o.Status.Equals("InProgress") && o.ScheduledDate < DateTime.Today).Any()) {
                                                    <RadzenPanel AllowCollapse="true" Style="margin: 0px auto;">
                                                        <HeaderTemplate>
                                                            <h4 class="m-0 d-flex align-items-center">
                                                                <RadzenIcon Icon="hourglass_full" IconStyle="IconStyle.Danger" Class="mr-1" /><b>Late</b>
                                                            </h4>
                                                        </HeaderTemplate>

                                                        <ChildContent>
                                                            <RadzenDataGrid Class="mt-3" TItem="WorkOrder" Data="@_selectedProductWorkOrders.Where(o => o.Status.Equals("InProgress") && o.ScheduledDate < DateTime.Today)" AllowFiltering="false" AllowColumnResize="true" AllowSorting="true">
                                                                <Columns>
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Number" Title="Number" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Name" Title="Name" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="CustomerName" Title="Customer" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="VendorName" Title="Vendor" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Quantity" Title="Qty" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Title="Scheduled" Property="ScheduledDate" Sortable="true">
                                                                        <Template Context="order">
                                                                            <span @onclick="OpenScheduler" class="link" style="color:darkred; font-weight:bold;">
                                                                                @if (order.ScheduledDate is null) {
                                                                                    <span>no date</span>
                                                                                } else {
                                                                                    <span>@DateTimeString((DateTime)order.ScheduledDate)</span>
                                                                                }
                                                                            </span>
                                                                        </Template>
                                                                    </RadzenDataGridColumn>
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="false" Filterable="false">
                                                                        <Template Context="order">
                                                                            <RadzenButton ButtonStyle="ButtonStyle.Secondary">Complete</RadzenButton>
                                                                        </Template>
                                                                    </RadzenDataGridColumn>
                                                                </Columns>
                                                            </RadzenDataGrid>
                                                        </ChildContent>

                                                        <SummaryTemplate>
                                                            <RadzenCard class="mt-3">
                                                                <b>@("Late Order".ToQuantity(_selectedProductWorkOrders.Where(o => o.Status.Equals("InProgress") && o.ScheduledDate < DateTime.Today).Count()))</b>
                                                            </RadzenCard>
                                                        </SummaryTemplate>
                                                    </RadzenPanel>
                                                }

                                                <!-- Unscheduled Orders -->
                                                @if (_selectedProductWorkOrders.Where(o => o.ScheduledDate is null).Any()) {
                                                    <RadzenPanel AllowCollapse="true" Style="margin: 40px auto;">
                                                        <HeaderTemplate>
                                                            <h4 class="m-0 d-flex align-items-center">
                                                                <RadzenIcon Icon="alarm" IconStyle="IconStyle.Warning" Class="mr-1" /><b>Unscheduled</b>
                                                            </h4>
                                                        </HeaderTemplate>

                                                        <ChildContent>
                                                            <RadzenDataGrid Class="mt-3" TItem="WorkOrder" Data="@_selectedProductWorkOrders.Where(o => o.ScheduledDate is null)" AllowFiltering="false" AllowColumnResize="true" AllowSorting="true">
                                                                <Columns>
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Number" Title="Number" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Name" Title="Name" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="CustomerName" Title="Customer" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="VendorName" Title="Vendor" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Quantity" Title="Qty" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="false" Filterable="false">
                                                                        <Template Context="order">
                                                                            <RadzenButton>Schedule</RadzenButton>
                                                                        </Template>
                                                                    </RadzenDataGridColumn>
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="false" Filterable="false">
                                                                        <Template Context="order">
                                                                            <RadzenButton ButtonStyle="ButtonStyle.Secondary">Complete</RadzenButton>
                                                                        </Template>
                                                                    </RadzenDataGridColumn>
                                                                </Columns>
                                                            </RadzenDataGrid>
                                                        </ChildContent>

                                                        <SummaryTemplate>
                                                            <RadzenCard class="mt-3">
                                                                <b>@("Unscheduled Order".ToQuantity(_selectedProductWorkOrders.Where(o => o.ScheduledDate is null).Count()))</b>
                                                            </RadzenCard>
                                                        </SummaryTemplate>
                                                    </RadzenPanel>
                                                }

                                                @if (_selectedProductWorkOrders.Where(o => o.Status.Equals("InProgress")).Any()) {

                                                    <RadzenPanel AllowCollapse="true" Style="margin: 40px auto;">
                                                        <HeaderTemplate>
                                                            <h4 class="m-0 d-flex align-items-center">
                                                                <RadzenIcon Icon="alarm" IconStyle="IconStyle.Info" Class="mr-1" /><b>Scheduled</b>
                                                            </h4>
                                                        </HeaderTemplate>

                                                        <ChildContent>
                                                            <RadzenDataGrid Class="mt-3" TItem="WorkOrder" Data="@_selectedProductWorkOrders.Where(o => o.Status.Equals("InProgress"))" AllowFiltering="false" AllowColumnResize="true" AllowSorting="true">
                                                                <Columns>
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Number" Title="Number" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Name" Title="Name" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="CustomerName" Title="Customer" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="VendorName" Title="Vendor" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Quantity" Title="Qty" />
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Title="Scheduled" Property="ScheduledDate" Sortable="true">
                                                                        <Template Context="order">
                                                                            <span @onclick="OpenScheduler" class="link">
                                                                                @if (order.ScheduledDate is null) {
                                                                                    <span>no date</span>
                                                                                } else {
                                                                                    <span>@DateTimeString((DateTime)order.ScheduledDate)</span>
                                                                                }
                                                                            </span>
                                                                        </Template>
                                                                    </RadzenDataGridColumn>
                                                                    <RadzenDataGridColumn TItem="WorkOrder" Sortable="false" Filterable="false">
                                                                        <Template Context="order">
                                                                            <RadzenButton ButtonStyle="ButtonStyle.Secondary">Complete</RadzenButton>
                                                                        </Template>
                                                                    </RadzenDataGridColumn>
                                                                </Columns>
                                                            </RadzenDataGrid>
                                                        </ChildContent>

                                                        <SummaryTemplate>
                                                            <RadzenCard class="mt-3">
                                                                <b>@("Scheduled Order".ToQuantity(_selectedProductWorkOrders.Where(o => o.Status.Equals("InProgress")).Count()))</b>
                                                            </RadzenCard>
                                                        </SummaryTemplate>
                                                    </RadzenPanel>
                                                }

                                            </RadzenTabsItem>
                                
                                            <RadzenTabsItem Text="Not Released">
                                                <RadzenDataGrid Class="mt-3" TItem="WorkOrder" Data="@_selectedProductWorkOrders.Where(o => o.Status.Equals("Pending"))" AllowFiltering="false" AllowColumnResize="true" AllowSorting="true">
                                                    <Columns>
                                                        <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Number" Title="Number" />
                                                        <RadzenDataGridColumn TItem="WorkOrder" Sortable="true" Property="Name" Title="Name" />
                                                        <RadzenDataGridColumn TItem="WorkOrder" Width="160px" Sortable="false" Filterable="false">
                                                            <Template Context="order">
                                                                <RadzenButton ButtonStyle="ButtonStyle.Secondary">Release</RadzenButton>
                                                            </Template>
                                                        </RadzenDataGridColumn>
                                                    </Columns>
                                                </RadzenDataGrid>
                                            </RadzenTabsItem>

                                            <RadzenTabsItem Text="Fulfilled">
                                            </RadzenTabsItem>

                                            <RadzenTabsItem Text="Canceled">
                                            </RadzenTabsItem>
                                        </Tabs>
                                    </RadzenTabs>
                                </div>
                            </div>
                        </div>
                    }

                </div>

            </div>
        </div>
    }

}

@if (!string.IsNullOrEmpty(errorMsg)) {
    <p style="color:red">@errorMsg</p>
    @if (!showDetailedError) {
        <button @onclick="ShowExceptionDetails">Details</button>
    } else {
        <p>@(exception?.ToString() ?? "no details.")</p>
    }
}

@code {

    bool isLoading = true;
    string errorMsg = "";
    Exception? exception = default;
    bool showDetailedError = false;

    private Dictionary<string, List<WorkOrder>> _workOrdersByProduct = new();

    private string _selectedProductname = "";
    private List<WorkOrder> _selectedProductWorkOrders = new();

    protected override async Task OnInitializedAsync() {

        await LoadWorkOrders();

    }

    private async Task LoadWorkOrders() {
        try {

            isLoading = true;
            IEnumerable<WorkOrder> workOrders = await workorderApi.GetAll();

            _workOrdersByProduct = workOrders.GroupBy(o => o.ProductName)
                                                .ToDictionary(g => g.Key, g => g.ToList());

            errorMsg = "";

        } catch (Exception ex) {
            errorMsg = ex.Message;
            exception = ex;
        } finally {
            isLoading = false;
        }

    }

    void OnProductSelect(TreeEventArgs args) {
        _selectedProductname = args.Text;
        _selectedProductWorkOrders = _workOrdersByProduct[args.Text];
    }

    private void OpenScheduler() {
        Debug.WriteLine("Hello World");
    }

    private string DateTimeString(DateTime date) {

        if (date.Date == DateTime.Today.Date)
            return "Today";

        if (date.Year == DateTime.Today.Year)
            return date.ToString("dddd MMM dd");

        return date.ToString("dddd MMM dd yyyy");

    }

    private void ShowExceptionDetails() => showDetailedError = true;

}